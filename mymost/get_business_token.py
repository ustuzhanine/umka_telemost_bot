#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å 360
"""

import webbrowser
import sys

def get_business_token():
    """–ü–æ—à–∞–≥–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    
    print("üè¢ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–†–ü–û–†–ê–¢–ò–í–ù–û–ì–û –¢–û–ö–ï–ù–ê –Ø–ù–î–ï–ö–° 360")
    print("=" * 60)
    
    print("\nüìã –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å:")
    print("‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å 360 (admin@yourcompany.ru)")
    print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
    
    input("\nüìç –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã...")
    
    print("\nüîß –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ OAuth –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("1. –û—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ OAuth –Ø–Ω–¥–µ–∫—Å")
    print("2. –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ú –∞–∫–∫–∞—É–Ω—Ç–æ–º (admin@yourcompany.ru)")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º OAuth —Å—Ç—Ä–∞–Ω–∏—Ü—É
    oauth_url = "https://oauth.yandex.ru/"
    print(f"\nüåê –û—Ç–∫—Ä—ã–≤–∞—é: {oauth_url}")
    
    try:
        webbrowser.open(oauth_url)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    except:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: {oauth_url}")
    
    input("\nüìç –°–æ–∑–¥–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ Enter...")
    
    print("\n‚öôÔ∏è –®–ê–ì 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
    print("–í —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
    print("‚úÖ telemost-api:conferences.create")
    print("‚úÖ telemost-api:conferences.read") 
    print("‚úÖ telemost-api:conferences.update")
    print("‚úÖ telemost-api:conferences.delete")
    
    client_id = input("\nüÜî –í–≤–µ–¥–∏—Ç–µ Client ID –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ").strip()
    
    if not client_id:
        print("‚ùå Client ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return
    
    print(f"\n‚úÖ Client ID: {client_id}")
    
    print("\nüîë –®–ê–ì 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    scopes = [
        "telemost-api:conferences.create",
        "telemost-api:conferences.read", 
        "telemost-api:conferences.update",
        "telemost-api:conferences.delete"
    ]
    
    scope_string = "%20".join(scopes)
    token_url = f"https://oauth.yandex.ru/authorize?response_type=token&client_id={client_id}&scope={scope_string}"
    
    print("1. –û—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("2. –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ú –∞–∫–∫–∞—É–Ω—Ç–æ–º")
    print("3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ URL –ø–æ—Å–ª–µ #access_token=")
    
    print(f"\nüåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    print(f"URL: {token_url}")
    
    try:
        webbrowser.open(token_url)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞")
    except:
        print(f"‚ùå –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: {token_url}")
    
    print("\nüìù –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ URL –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:")
    print("https://oauth.yandex.ru/verification_code#access_token=y0_AgA...&token_type=bearer&expires_in=31536000")
    print("                                                    ^^^^^^^^")
    print("                                                    –í–∞—à —Ç–æ–∫–µ–Ω")
    
    token = input("\nüîë –í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: ").strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω!")
        return
    
    if not token.startswith(('y0_AgA', 'y0__x')):
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å y0_AgA –∏–ª–∏ y0__x")
    
    print(f"\n‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...{token[-10:]}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
    env_content = f"""# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å 360 –¥–ª—è API –¢–µ–ª–µ–º–æ—Å—Ç
YANDEX_OAUTH_TOKEN={token}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
CLIENT_ID={client_id}
TOKEN_TYPE=bearer
EXPIRES_IN=31536000

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL=INFO
"""
    
    with open("business_token.env", "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print("\nüíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: business_token.env")
    
    print("\nüß™ –®–ê–ì 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    print("–°–µ–π—á–∞—Å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    import requests
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        response = requests.get(
            'https://login.yandex.ru/info',
            headers={'Authorization': f'OAuth {token}'},
            timeout=10
        )
        
        if response.status_code == 200:
            user_info = response.json()
            login = user_info.get('login', 'N/A')
            email = user_info.get('default_email', 'N/A')
            
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {login}")
            print(f"üìß Email: {email}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            if email.endswith(('.ru', '.com')) and '@' in email and not email.endswith('@yandex.ru'):
                print("üè¢ –¢–ò–ü: –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô –ê–ö–ö–ê–£–ù–¢ ‚úÖ")
            else:
                print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¢–µ–ª–µ–º–æ—Å—Ç
        print("\nüé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¢–µ–ª–µ–º–æ—Å—Ç...")
        response = requests.post(
            'https://cloud-api.yandex.net/v1/telemost-api/conferences',
            headers={
                'Authorization': f'OAuth {token}',
                'Content-Type': 'application/json'
            },
            json={'waiting_room_level': 'PUBLIC'},
            timeout=10
        )
        
        if response.status_code == 201:
            meeting = response.json()
            print("üéâ –£–°–ü–ï–•! API –¢–µ–ª–µ–º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üìã –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {meeting['id']}")
            print(f"üîó –°—Å—ã–ª–∫–∞: {meeting['join_url']}")
            
            print("\n‚úÖ –í–°–ï –ì–û–¢–û–í–û –î–õ–Ø –†–ê–ë–û–¢–´!")
            print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ business_token.env –≤ .env:")
            print("cp business_token.env .env")
            
        else:
            error_data = response.json() if response.content else {}
            error_msg = error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}")
            
            if response.status_code == 403:
                if 'ApiRestrictedToOrganizations' in error_data.get('error', ''):
                    print("\nüí° –†–ï–®–ï–ù–ò–ï:")
                    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –æ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–æ–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å 360")
                    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print("\n" + "=" * 60)
    print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env: cp business_token.env .env")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python check_token_type.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã: python examples.py")

if __name__ == "__main__":
    get_business_token()
