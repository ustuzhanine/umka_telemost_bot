import os
import requests
import logging
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramBotError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ Telegram Bot API"""
    pass


class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self, bot_token: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.bot_token = bot_token or os.getenv('TELEGRAM_BOT_TOKEN')
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        if not self.bot_token:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def _make_request(self, method: str, data: Dict[str, Any] = None) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
        
        Args:
            method: –ú–µ—Ç–æ–¥ API
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        Returns:
            –û—Ç–≤–µ—Ç API
        
        Raises:
            TelegramBotError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        """
        if not self.bot_token:
            raise TelegramBotError("Bot token not configured")
        
        url = f"{self.base_url}/{method}"
        
        try:
            response = requests.post(url, json=data, timeout=30)
            result = response.json()
            
            if not result.get('ok'):
                error_msg = result.get('description', 'Unknown error')
                raise TelegramBotError(f"Telegram API error: {error_msg}")
            
            return result.get('result', {})
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Network error: {e}")
            raise TelegramBotError(f"Network error: {e}")
    
    def send_message(
        self, 
        chat_id: str, 
        text: str, 
        parse_mode: str = 'HTML',
        disable_web_page_preview: bool = True
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ username
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        """
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': disable_web_page_preview
        }
        
        logger.info(f"Sending message to {chat_id}")
        return self._make_request('sendMessage', data)
    
    def send_meeting_invitation(
        self,
        chat_id: str,
        meeting_data: Dict[str, Any],
        custom_message: str = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ username
            meeting_data: –î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
            custom_message: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        """
        meeting_id = meeting_data.get('id', 'N/A')
        join_url = meeting_data.get('join_url', '')
        title = meeting_data.get('title', '–í—Å—Ç—Ä–µ—á–∞ –≤ Telemost')
        description = meeting_data.get('description', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if custom_message:
            message = custom_message
        else:
            message = f"üé• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É</b>\n\n"
            
            if title:
                message += f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            
            if description:
                message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            
            message += f"\nüîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n{join_url}\n"
            message += f"\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ"
        
        return self.send_message(chat_id, message)
    
    def get_me(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        return self._make_request('getMe')
    
    def send_bulk_invitations(
        self,
        contacts: List[Dict[str, Any]],
        meeting_data: Dict[str, Any],
        custom_message: str = None
    ) -> Dict[str, Any]:
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        
        Args:
            contacts: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            meeting_data: –î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
            custom_message: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.bot_token:
            logger.warning("Bot token not configured, simulating send")
            return {
                'success': True,
                'sent_count': len(contacts),
                'failed_count': 0,
                'simulated': True
            }
        
        sent_count = 0
        failed_count = 0
        errors = []
        
        for contact in contacts:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ username, –µ—Å–ª–∏ –µ—Å—Ç—å
                chat_id = contact.get('username', '').replace('@', '')
                if not chat_id:
                    # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    chat_id = contact.get('id')
                
                if not chat_id:
                    logger.warning(f"No chat_id for contact: {contact}")
                    failed_count += 1
                    continue
                
                self.send_meeting_invitation(chat_id, meeting_data, custom_message)
                sent_count += 1
                logger.info(f"Invitation sent to {contact.get('name', chat_id)}")
                
            except TelegramBotError as e:
                logger.error(f"Failed to send to {contact.get('name', 'unknown')}: {e}")
                failed_count += 1
                errors.append(str(e))
            except Exception as e:
                logger.error(f"Unexpected error sending to {contact.get('name', 'unknown')}: {e}")
                failed_count += 1
                errors.append(str(e))
        
        return {
            'success': sent_count > 0,
            'sent_count': sent_count,
            'failed_count': failed_count,
            'errors': errors[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBot()


def send_meeting_to_contacts(
    contacts: List[Dict[str, Any]], 
    meeting_data: Dict[str, Any],
    custom_message: str = None
) -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    
    Args:
        contacts: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        meeting_data: –î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
        custom_message: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    return telegram_bot.send_bulk_invitations(contacts, meeting_data, custom_message)


def check_bot_status() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    try:
        if not telegram_bot.bot_token:
            return {
                'status': 'not_configured',
                'message': 'Bot token not configured'
            }
        
        bot_info = telegram_bot.get_me()
        return {
            'status': 'active',
            'bot_info': bot_info
        }
    except TelegramBotError as e:
        return {
            'status': 'error',
            'message': str(e)
        }
    except Exception as e:
        return {
            'status': 'error',
            'message': f"Unexpected error: {e}"
        }

